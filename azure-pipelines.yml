trigger:
  - main

pool:
  vmImage: 'windows-latest'


variables:
  buildConfiguration: 'Release'
  resourceGroupName: 'rg-webapp-demo1'
  location: 'Central India'
  appName: 'webapp-demo-324598'
  appServicePlanName: 'asp-webapp-demo'

stages:
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet >=6.0.0'
      inputs:
        versionSpec: '>=6.0.0'

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        command: 'restore'
        restoreSolution: '**/*.sln'
  
    - task: SonarCloudPrepare@3
      displayName: 'Prepare analysis on SonarCloud'
      inputs:
        SonarQube: 'sonar'
        organization: 'baladevops'
        scannerMode: 'dotnet'
        projectKey: 'AzureASPWebApp'
        projectName: 'baladevops_azureaspwebapp'
        projectVersion: '1.0'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'
        publishLocation: 'Container'
    
    - task: VSTest@2
      displayName: 'Test Assemblies'
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*test*.dll
          !**\*TestAdapter.dll
          !**\obj\**
        platform: 'Any CPU'
        configuration: 'Release'
    
    - task: SonarCloudAnalyze@3
      displayName: 'Run Code Analysis'

    - task: SonarCloudPublish@3
      displayName: 'Publish Quality Gate Result'
      inputs:
        pollingTimeoutSec: 300

    - task: PublishSymbols@2
      displayName: 'Publish symbols path'
      inputs:
        SearchPattern: '**/bin/**/*.pdb'
        symbolServerType: 'TeamServices'
  
- stage: Deploy
  displayName: 'Deploy to Azure App Service'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployWebApp
    displayName: 'Deploy Web App to Azure'
    environment: 'production'
    pool:
      vmImage: 'windows-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Create and Verify Resources'
            inputs:
              azureSubscription: 'azureconnection'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Enable verbose output
                $VerbosePreference = 'Continue'
                $ErrorActionPreference = 'Continue'

                # Verify Azure connection
                Write-Host "##[section]Verifying Azure connection..."
                az account show --output none
                if ($LASTEXITCODE -ne 0) { 
                    Write-Host "##[error]Failed to authenticate with Azure"
                    exit 1 
                }

                # Create/verify resource group
                Write-Host "Creating/verifying resource group..."
                $rgExists = az group exists --name "$(resourceGroupName)"
                if ($rgExists -eq "false") {
                    Write-Host "Creating resource group '$(resourceGroupName)'..."
                    az group create --name "$(resourceGroupName)" --location "$(location)" --output none
                }

                # Create/verify app service plan with retry logic
                Write-Host "Creating/verifying app service plan..."
                $maxRetries = 3
                $retryCount = 0
                $planCreated = $false

                while (-not $planCreated -and $retryCount -lt $maxRetries) {
                    try {
                        Write-Host "Checking if App Service Plan exists..."
                        $planCheck = az appservice plan list --resource-group "$(resourceGroupName)" --query "[?name=='$(appServicePlanName)']" --output json
                        Write-Host "Plan check result: $planCheck"
                        
                        if ($planCheck -eq "[]") {
                            Write-Host "Creating app service plan '$(appServicePlanName)'..."
                            $result = az appservice plan create `
                                --name "$(appServicePlanName)" `
                                --resource-group "$(resourceGroupName)" `
                                --sku B1 `
                                --location "$(location)" `
                                --verbose

                            Write-Host "App Service Plan creation result: $result"
                            
                            # Verify creation
                            $verifyPlan = az appservice plan show --name "$(appServicePlanName)" --resource-group "$(resourceGroupName)" --output json
                            if ($verifyPlan) {
                                Write-Host "App Service Plan created successfully"
                                $planCreated = $true
                            }
                        } else {
                            Write-Host "App Service Plan already exists"
                            $planCreated = $true
                        }
                    }
                    catch {
                        $retryCount++
                        Write-Host "##[warning]Error creating App Service Plan: $_"
                        if ($retryCount -lt $maxRetries) {
                            Write-Host "Retry $retryCount of $maxRetries for creating app service plan..."
                            Start-Sleep -Seconds 30
                        }
                    }
                }

                if (-not $planCreated) {
                    Write-Host "##[error]Failed to create or verify App Service Plan after $maxRetries attempts"
                    exit 1
                }

                # Create/verify web app with retry logic
                Write-Host "Creating/verifying web app..."
                $retryCount = 0
                $webappCreated = $false

                while (-not $webappCreated -and $retryCount -lt $maxRetries) {
                    try {
                        Write-Host "Checking if Web App exists..."
                        $webappCheck = az webapp list --resource-group "$(resourceGroupName)" --query "[?name=='$(appName)']" --output json
                        Write-Host "Web App check result: $webappCheck"

                        if ($webappCheck -eq "[]") {
                            Write-Host "Creating web app '$(appName)'..."
                            $result = az webapp create `
                                --name "$(appName)" `
                                --resource-group "$(resourceGroupName)" `
                                --plan "$(appServicePlanName)" `
                                --runtime "dotnet:7" `
                                --verbose

                            Write-Host "Web App creation result: $result"
                            
                            # Verify creation
                            $verifyWebapp = az webapp show --name "$(appName)" --resource-group "$(resourceGroupName)" --output json
                            if ($verifyWebapp) {
                                Write-Host "Web App created successfully"
                                $webappCreated = $true
                            }
                        } else {
                            Write-Host "Web App already exists"
                            $webappCreated = $true
                        }
                    }
                    catch {
                        $retryCount++
                        Write-Host "##[warning]Error creating Web App: $_"
                        if ($retryCount -lt $maxRetries) {
                            Write-Host "Retry $retryCount of $maxRetries for creating web app..."
                            Start-Sleep -Seconds 30
                        }
                    }
                }

                if (-not $webappCreated) {
                    Write-Host "##[error]Failed to create or verify Web App after $maxRetries attempts"
                    exit 1
                }

                # Configure web app settings
                Write-Host "Configuring web app settings..."
                az webapp config set --name "$(appName)" --resource-group "$(resourceGroupName)" --always-on true
                az webapp config appsettings set --name "$(appName)" --resource-group "$(resourceGroupName)" --settings WEBSITE_RUN_FROM_PACKAGE="1"

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: 'azureconnection'
              appName: '$(appName)'
              package: '$(Pipeline.Workspace)/drop/**/*.zip'
              deploymentMethod: 'auto'
